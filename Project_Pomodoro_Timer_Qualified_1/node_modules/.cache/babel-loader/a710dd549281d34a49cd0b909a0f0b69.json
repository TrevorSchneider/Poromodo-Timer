{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tschn\\\\Desktop\\\\Coding Bootcamp\\\\Projects\\\\pomodoro-timer\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Timer.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport { PropTypes } from \"prop-types\";\n\nfunction Timer({\n  focusTime,\n  remainingTime,\n  isTimerRunning,\n  inSession,\n  currentSession,\n  breakTime\n}) {\n  const paused = isTimerRunning ? \"\" : \"PAUSED\";\n  const time = currentSession === \"On Break\" ? breakTime : focusTime;\n  const percent = (time * 60 - remainingTime) / (time * 60) * 100;\n\n  if (inSession) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, currentSession, \" for \", minutesToDuration(time), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, secondsToDuration(remainingTime), \" remaining\"))), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, paused), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": percent // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: `${percent}%`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    })))));\n  } else {\n    return null;\n  }\n}\n\nTimer.propTypes = {\n  focusTime: PropTypes.number,\n  remainingTime: PropTypes.number,\n  isTimerRunning: PropTypes.bool,\n  currentSession: PropTypes.string,\n  breakTime: PropTypes.number,\n  inSession: PropTypes.bool\n};\nexport default Timer;","map":{"version":3,"sources":["C:/Users/tschn/Desktop/Coding Bootcamp/Projects/pomodoro-timer/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.js"],"names":["React","minutesToDuration","secondsToDuration","PropTypes","Timer","focusTime","remainingTime","isTimerRunning","inSession","currentSession","breakTime","paused","time","percent","height","width","propTypes","number","bool","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,SAASC,KAAT,CAAe;AACbC,EAAAA,SADa;AAEbC,EAAAA,aAFa;AAGbC,EAAAA,cAHa;AAIbC,EAAAA,SAJa;AAKbC,EAAAA,cALa;AAMbC,EAAAA;AANa,CAAf,EAOG;AACD,QAAMC,MAAM,GAAGJ,cAAc,GAAG,EAAH,GAAQ,QAArC;AACA,QAAMK,IAAI,GAAGH,cAAc,KAAK,UAAnB,GAAgCC,SAAhC,GAA4CL,SAAzD;AACA,QAAMQ,OAAO,GAAI,CAACD,IAAI,GAAG,EAAP,GAAYN,aAAb,KAA+BM,IAAI,GAAG,EAAtC,CAAD,GAA8C,GAA9D;;AAEA,MAAIJ,SAAJ,EAAe;AACb,wBACE,uDAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,cADH,WACwBR,iBAAiB,CAACW,IAAD,CADzC,aAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,iBAAiB,CAACI,aAAD,CADpB,eANF,CADF,CAFF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKK,MAAL,CAdF,eAeE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAeD,OALjB,CAK0B;AAL1B;AAME,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAG,GAAEF,OAAQ;AAApB,OANT,CAMmC;AANnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAfF,CADF;AAgCD,GAjCD,MAiCO;AACL,WAAO,IAAP;AACD;AACF;;AAEDT,KAAK,CAACY,SAAN,GAAkB;AAChBX,EAAAA,SAAS,EAAEF,SAAS,CAACc,MADL;AAEhBX,EAAAA,aAAa,EAAEH,SAAS,CAACc,MAFT;AAGhBV,EAAAA,cAAc,EAAEJ,SAAS,CAACe,IAHV;AAIhBT,EAAAA,cAAc,EAAEN,SAAS,CAACgB,MAJV;AAKhBT,EAAAA,SAAS,EAAEP,SAAS,CAACc,MALL;AAMhBT,EAAAA,SAAS,EAAEL,SAAS,CAACe;AANL,CAAlB;AASA,eAAed,KAAf","sourcesContent":["import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Timer({\r\n  focusTime,\r\n  remainingTime,\r\n  isTimerRunning,\r\n  inSession,\r\n  currentSession,\r\n  breakTime,\r\n}) {\r\n  const paused = isTimerRunning ? \"\" : \"PAUSED\";\r\n  const time = currentSession === \"On Break\" ? breakTime : focusTime;\r\n  const percent = ((time * 60 - remainingTime) / (time * 60)) * 100;\r\n\r\n  if (inSession) {\r\n    return (\r\n      <>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {currentSession} for {minutesToDuration(time)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(remainingTime)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <h2>{paused}</h2>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${percent}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  focusTime: PropTypes.number,\r\n  remainingTime: PropTypes.number,\r\n  isTimerRunning: PropTypes.bool,\r\n  currentSession: PropTypes.string,\r\n  breakTime: PropTypes.number,\r\n  inSession: PropTypes.bool,\r\n};\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}